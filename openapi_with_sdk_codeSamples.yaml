{"openapi": "3.1.0", "info": {"title": "Unstructured Pipeline API", "version": "1.0.30"}, "servers": [{"url": "https://api.unstructured.io", "description": "Hosted API Free", "x-speakeasy-server-id": "free-api"}, {"url": "http://localhost:8000", "description": "Development server", "x-speakeasy-server-id": "development"}], "paths": {"/general/v0/general": {"post": {"tags": ["general"], "summary": "Summary", "description": "Description", "operationId": "partition", "parameters": [{"name": "unstructured-api-key", "in": "header", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Unstructured-Api-Key"}}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/partition_parameters"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Element"}, "title": "Elements", "type": "array"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "x-speakeasy-name-override": "partition", "x-codeSamples": [{"lang": "python", "label": "partition", "source": "import unstructured_client\nfrom unstructured_client.models import shared\n\ns = unstructured_client.UnstructuredClient(\n    api_key_auth=\"YOUR_API_KEY\",\n)\n\nreq = shared.PartitionParameters(\n    chunking_strategy='by_title',\n    combine_under_n_chars=500,\n    encoding='utf-8',\n    extract_image_block_types=[\n        'image',\n        'table',\n    ],\n    gz_uncompressed_content_type='application/pdf',\n    hi_res_model_name='yolox',\n    languages=[\n        '[',\n        'e',\n        'n',\n        'g',\n        ']',\n    ],\n    max_characters=1500,\n    new_after_n_chars=1500,\n    output_format='application/json',\n    overlap=25,\n    strategy='hi_res',\n)\n\nres = s.partition(req)\n\nif res.elements is not None:\n    # handle response\n    pass"}, {"lang": "typescript", "label": "partition", "source": "import { openAsBlob } from \"node:fs\";\nimport { UnstructuredClient } from \"unstructured-client\";\n\nasync function run() {\n  const sdk = new UnstructuredClient({\n    security: {\n      apiKeyAuth: \"YOUR_API_KEY\",\n    },\n  });\n\n  const result = await sdk.partition({\n    chunkingStrategy: \"by_title\",\n    combineUnderNChars: 500,\n    encoding: \"utf-8\",\n    extractImageBlockTypes: [\n      \"image\",\n      \"table\",\n    ],\n    files: await openAsBlob(\"./sample-file\"),\n    gzUncompressedContentType: \"application/pdf\",\n    hiResModelName: \"yolox\",\n    languages: [\n      \"[\",\n      \"e\",\n      \"n\",\n      \"g\",\n      \"]\",\n    ],\n    maxCharacters: 1500,\n    newAfterNChars: 1500,\n    outputFormat: \"application/json\",\n    overlap: 25,\n    skipInferTableTypes: [\n      \"pdf\",\n    ],\n    strategy: \"hi_res\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}]}}}, "components": {"schemas": {"HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "partition_parameters": {"properties": {"files": {"type": "string", "format": "binary", "description": "The file to extract", "required": "true", "examples": [{"summary": "File to be partitioned", "externalValue": "https://github.com/Unstructured-IO/unstructured/blob/98d3541909f64290b5efb65a226fc3ee8a7cc5ee/example-docs/layout-parser-paper.pdf"}]}, "xml_keep_tags": {"type": "boolean", "title": "Xml Keep Tags", "description": "If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.", "default": false}, "languages": {"items": {"type": "string"}, "type": "array", "title": "OCR Languages", "description": "The languages present in the document, for use in partitioning and/or OCR", "default": []}, "ocr_languages": {"items": {"type": "string"}, "type": "array", "title": "OCR Languages", "description": "The languages present in the document, for use in partitioning and/or OCR", "default": []}, "skip_infer_table_types": {"items": {"type": "string"}, "type": "array", "title": "Skip Infer Table Types", "description": "The document types that you want to skip table extraction with. Default: []", "default": []}, "gz_uncompressed_content_type": {"anyOf": [{"type": "string", "default": null}, {"type": "null"}], "title": "Uncompressed Content Type", "description": "If file is gzipped, use this content type after unzipping"}, "output_format": {"type": "string", "enum": ["application/json", "text/csv"], "title": "Output Format", "description": "The format of the response. Supported formats are application/json and text/csv. Default: application/json.", "default": "application/json"}, "coordinates": {"type": "boolean", "title": "Coordinates", "description": "If true, return coordinates for each element. Default: false", "default": false}, "encoding": {"anyOf": [{"type": "string", "default": null}, {"type": "null"}], "title": "Encoding", "description": "The encoding method used to decode the text input. Default: utf-8"}, "hi_res_model_name": {"anyOf": [{"type": "string", "default": null}, {"type": "null"}], "title": "Hi Res Model Name", "description": "The name of the inference model used when strategy is hi_res"}, "include_page_breaks": {"type": "boolean", "title": "Include Page Breaks", "description": "If True, the output will include page breaks if the filetype supports it. Default: false", "default": false}, "pdf_infer_table_structure": {"type": "boolean", "title": "Pdf Infer Table Structure", "description": "Deprecated! Use skip_infer_table_types to opt out of table extraction for any file type. If False and strategy=hi_res, no Table Elements will be extracted from pdf files regardless of skip_infer_table_types contents.", "default": true}, "strategy": {"type": "string", "enum": ["fast", "hi_res", "auto", "ocr_only"], "title": "Strategy", "description": "The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto", "default": "auto", "examples": ["auto", "hi_res"]}, "extract_image_block_types": {"items": {"type": "string"}, "type": "array", "title": "Image block types to extract", "description": "The types of elements to extract, for use in extracting image blocks as base64 encoded data stored in metadata fields", "default": []}, "unique_element_ids": {"type": "boolean", "title": "unique_element_ids", "description": "When `True`, assign UUIDs to element IDs, which guarantees their uniqueness \n(useful when using them as primary keys in database). Otherwise a SHA-256 of element text is used. Default: False", "default": false}, "starting_page_number": {"anyOf": [{"type": "integer", "default": null}, {"type": "null"}], "title": "PDF Starting Page Number", "description": "When PDF is split into pages before sending it into the API, providing this information will allow the page number to be assigned correctly. Introduced in 1.0.27."}, "chunking_strategy": {"anyOf": [{"type": "string", "enum": ["basic", "by_page", "by_similarity", "by_title"], "default": null}, {"type": "null"}], "title": "Chunking Strategy", "description": "Use one of the supported strategies to chunk the returned elements. Currently supports: 'basic', 'by_page', 'by_similarity', or 'by_title'", "examples": ["by_title", "basic"]}, "combine_under_n_chars": {"anyOf": [{"type": "integer", "default": null}, {"type": "null"}], "title": "Combine Under N Chars", "description": "If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500"}, "include_orig_elements": {"anyOf": [{"type": "boolean", "default": null}, {"type": "null"}], "title": "Include original elements in chunks", "description": "When a chunking strategy is specified, each returned chunk will include the elements consolidated to form that chunk as `.metadata.orig_elements`. Default: true."}, "max_characters": {"anyOf": [{"type": "integer", "default": null}, {"type": "null"}], "title": "Max Characters", "description": "If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 500"}, "multipage_sections": {"type": "boolean", "title": "Multipage Sections", "description": "If chunking strategy is set, determines if sections can span multiple sections. Default: true", "default": true}, "new_after_n_chars": {"anyOf": [{"type": "integer", "default": null}, {"type": "null"}], "title": "New after n chars", "description": "If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500"}, "overlap": {"type": "integer", "title": "Overlap", "description": "Specifies the length of a string ('tail') to be drawn from each chunk and prefixed to the next chunk as a context-preserving mechanism. By default, this only applies to split-chunks where an oversized element is divided into multiple chunks by text-splitting. Default: 0", "default": 0}, "overlap_all": {"type": "boolean", "title": "Overlap all", "description": "When `True`, apply overlap between 'normal' chunks formed from whole elements and not subject to text-splitting. Use this with caution as it entails a certain level of 'pollution' of otherwise clean semantic chunk boundaries. Default: False", "default": false}, "similarity_threshold": {"anyOf": [{"type": "number", "default": null}, {"type": "null"}], "title": "similarity-threshold", "description": "A value between 0.0 and 1.0 describing the minimum similarity two elements must have to be included in the same chunk. Note that similar elements may be separated to meet chunk-size criteria; this value can only guarantees that two elements with similarity below the threshold will appear in separate chunks."}, "split_pdf_page": {"type": "boolean", "title": "Split Pdf Page", "description": "Should the pdf file be split at client. Ignored on backend."}}, "type": "object", "required": ["files"], "title": "Partition Parameters"}, "Element": {"properties": {"type": {"type": "string", "title": "Type"}, "element_id": {"type": "string", "title": "Element Id"}, "metadata": {"type": "object", "title": "Metadata"}, "text": {"type": "string", "title": "Text"}}, "type": "object", "required": ["type", "element_id", "metadata", "text"], "title": "Element"}}, "securitySchemes": {"ApiKeyAuth": {"type": "apiKey", "name": "unstructured-api-key", "in": "header", "x-speakeasy-example": "YOUR_API_KEY"}}}, "tags": [{"name": "general"}], "security": [{"ApiKeyAuth": []}], "x-speakeasy-retries": {"strategy": "backoff", "backoff": {"initialInterval": 500, "maxInterval": 60000, "maxElapsedTime": 900000, "exponent": 1.5}, "statusCodes": ["5xx"], "retryConnectionErrors": true}}
